General idea:

build a kd-tree implementation in C or C++ with python bindings.

the goal is to be able to use it for efficient NN search or kNN search

Question 1: How will I use TDD with this?

Ramble Answer 1:

	I want to imagine what I want to do with this tree.

	Typically, I want to do something like this:

	tree = new KDTree()
	for point in random_points(N):
		tree.add(point, randomValue)
	typical mapping stuff:
	pt in tree
    tree[pt]
	tree.delete(pt)
	len(tree)
	nearest_point = tree.nnsearch(pt)
	
	It looks like each of these functions could be something like a test

Ramble Answer 2:
  
	Could this be BDD?
	
Next steps:

	Well, the implementation I have so far seems to be doing what I want, and it should be enough to make a first attempt at improving the speed of doing a bunch of simple nearest-neighbor lookups. There are also some more tests that would be nice to have in cxxtest.

- python bindings #TOP PRIORITY#
- iterator traversal / deleting within iterator context (?)
- random-based test, lots of insertions and deletions and some nearest node checks?
- performance measurements for random data to verify O(log n) nn lookup.
  * it would be nice to have these in both C and Python to see if there's a nasty python overhead, once the bindings are in place


